service: monitoring-tester

plugins:
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-webpack
  - serverless-plugin-tracing
  - '@anttiviljami/serverless-stack-output'
  - serverless-iam-roles-per-function
  - serverless-scriptable-plugin

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  currentRegion: ${file(../monitoring-common/environment/config.${self:custom.currentStage}.json):region}

  monitoringCommonServiceName: ${file(../monitoring-common/serverless.yml):service}
  monitoringAppSyncServiceName: ${file(../monitoring-appsync-service/serverless.yml):service}

  alarmsTopicName: ${self:service}-alarms-topic-${self:custom.currentStage}
  alarmsTopicArn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.alarmsTopicName}

  notificationsTopicName: ${self:service}-notifications-topic-${self:custom.currentStage}
  notificationsTopicArn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notificationsTopicName}

  adminEmail: ${file(../monitoring-common/environment/config.${self:custom.currentStage}.json):adminEmail}

  endpointsTableName: ${self:service}-endpoints-table-${self:custom.currentStage}

  checkEndpointStepFunction: ${self:service}-check-endpoint-step-function-${self:custom.currentStage}
  checkEndpointStepFunctionId: MonitoringDashtesterDashcheckDashendpointDashstepDashfunctionDash${self:custom.currentStage}

  output:
    handler: ./scripts/stackOutput.handler

  scriptHooks:
    after:deploy:finalize:
      - scripts/envSetup.js

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'

stepFunctions:
  stateMachines:
    fanoutStepFuntion:
      events:
        - http:
            path: fanout
            method: POST
            cors: true
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
        - schedule:
            rate: rate(2 hours)
            enabled: false
      name: ${self:service}-fan-out-step-function-${self:custom.currentStage}
      definition:
        Comment: 'A step function to fan-out several other step functions'
        StartAt: Fanout
        States:
          Fanout:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.currentStage}-fanout
            End: true
      dependsOn:
        - EndpointsTable
        - ApiGatewayAuthorizer

    checkEndpointStepFunction:
      name: ${self:custom.checkEndpointStepFunction}
      definition:
        Comment: 'A step function to check a single endpoint'
        StartAt: CheckEndpoint
        States:
          CheckEndpoint:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.currentStage}-checkEndpoint
            Next: AggregateData
            TimeoutSeconds: 300

          AggregateData:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.currentStage}-aggregateData
            Next: CheckAndPersistResults
            TimeoutSeconds: 300

          CheckAndPersistResults:
            Type: Parallel
            End: true
            Branches:
              - StartAt: PersistResults
                States:
                  PersistResults:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.currentStage}-persistResults
                    End: true
              - StartAt: CheckResults
                States:
                  CheckResults:
                    Type: Choice
                    Default: DefaultState
                    Choices:
                      - Variable: '$.status'
                        StringEquals: 'PASS'
                        Next: SkipNotification
                      - Or:
                          - Variable: '$.status'
                            StringEquals: 'ERROR'
                          - Variable: '$.status'
                            StringEquals: 'WARNING'
                        Next: SendNotification
                  SkipNotification:
                    Type: Pass
                    End: true
                  SendNotification:
                    Type: Task
                    Resource: 'arn:aws:states:::sns:publish'
                    Parameters:
                      TopicArn: ${self:custom.notificationsTopicArn}
                      Message.$: '$.message'
                      Subject: 'Monitoring Service Notification'
                    End: true
                  DefaultState:
                    Type: Fail
                    Cause: 'No Matches!'

      dependsOn:
        # - AlarmsTopic
        - NotificationsTopic

      # alarms:
      #   topics:
      #     ok: ${self:custom.alarmsTopicArn}
      #     alarm: ${self:custom.alarmsTopicArn}
      #     insufficientData: ${self:custom.alarmsTopicArn}
      #   metrics:
      #     - executionsTimeOut
      #     - executionsFailed
      #     - executionsAborted
      #     - executionThrottled
      #   treatMissingData: missing

functions:
  checkEndpoint:
    handler: src/checkEndpointHandler.checkEndpoint
    timeout: 15

  aggregateData:
    handler: src/aggregateDataHandler.aggregateData

  persistResults:
    handler: src/persistResultsHandler.persistResults
    environment:
      GRAPHQL_ENDPOINT_URL:
        Fn::ImportValue: '${self:custom.monitoringAppSyncServiceName}:${self:custom.currentStage}:GraphQLApiUrl'
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'appsync:GraphQL'
        Resource:
          - Fn::Join:
              - ''
              - - 'Fn::ImportValue': '${self:custom.monitoringAppSyncServiceName}:${self:custom.currentStage}:GraphQLApiArn'
                - '/types/Mutation/fields/updateDataEntry'

  fanout:
    handler: src/fanoutHandler.fanout
    environment:
      DYNAMODB_TABLE: ${self:custom.endpointsTableName}
      STEP_FUNCTION: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.checkEndpointStepFunction}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - states:StartExecution
        Resource: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.checkEndpointStepFunction}
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Scan'
        Resource:
          - 'Fn::GetAtt': [EndpointsTable, Arn]
          - Fn::Join:
              - ''
              - - 'Fn::GetAtt': [EndpointsTable, Arn]
                - '/*'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.currentStage}
  region: ${self:custom.currentRegion}

  memorySize: 256
  logRetentionInDays: 7

  tracing: true # enable tracing
  iamRoleStatements:
    - Effect: 'Allow' # xray permissions (required)
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'

resources:
  - ${file(resources/dynamoDb.yml)}
  - ${file(resources/snsTopics.yml)}
  - ${file(resources/authorizer.yml)}
  - ${file(resources/outputs.yml)}
